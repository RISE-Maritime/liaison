name: Release

on:
  push:
    branches:
      - feature/compile_windows

jobs:
  build_linux:
    name: Build on Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and tag DevContainer image
        run: |
          docker build -t linux-container-image -f .devcontainer/Dockerfile .

      - name: Run DevContainer and build project
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace linux-container-image \
          bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: Debug Build Output (Linux)
        run: |
          echo "Listing build directory:"
          ls -la /
          ls -la build/

      - name: Upload Release Asset (Linux)
        uses: softprops/action-gh-release@v2
        with:
          files: build/liaison

  build_windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Install dependencies
        run: |
          choco install -y git cmake make ninja openssl zlib
          choco install rust --version=1.81.0

      - name: Set environment variables for Rust
        shell: powershell
        run: |
          echo "CARGO_HOME=$env:USERPROFILE\\.cargo" >> $env:GITHUB_ENV
          echo "RUSTUP_HOME=$env:USERPROFILE\\.rustup" >> $env:GITHUB_ENV
          echo "$env:USERPROFILE\\.cargo\\bin" >> $env:GITHUB_PATH
          rustup --version
          cargo --version

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: Download and build Protobuf
        run: |
          cd vcpkg
          ./vcpkg install protobuf protobuf:x64-windows
          ./vcpkg integrate install

      - name: Download and build zlib
        run: |
          git clone https://github.com/madler/zlib.git
          mkdir zlib/build
          cd zlib/build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF 
          ninja
          ninja install

      - name: Download and build libzip
        run: |
          curl -LO https://libzip.org/download/libzip-1.11.1.tar.gz
          powershell -command "tar -xzf libzip-1.11.1.tar.gz"
          cd libzip-1.11.1
          mkdir build-libzip && cd build-libzip
          cmake .. -G Ninja -DBUILD_SHARED_LIBS=OFF -DENABLE_ZLIB=ON
          ninja
          ninja install

      - name: Check Protobuf
        run: |
          echo "Listing build directory:"
          dir D:/a/liaison/liaison/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build and install Zenoh-c
        run: |
          git clone https://github.com/eclipse-zenoh/zenoh-c.git
          mkdir zenoh-c/build
          cd zenoh-c/build
          cmake ../ -DBUILD_SHARED_LIBS=FALSE -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target install

      - name: Build and install Zenoh-cpp
        run: |
          git clone https://github.com/eclipse-zenoh/zenoh-cpp.git
          mkdir zenoh-cpp/build
          cd zenoh-cpp/build
          cmake ../ -DBUILD_SHARED_LIBS=FALSE -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target install

      - name: Build Liaison
        run: |
          mkdir -p build && cd build
          cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=D:/a/liaison/liaison/vcpkg/scripts/buildsystems/vcpkg.cmakee
          ninja
          ninja install

      - name: Debug Build Output
        run: |
          echo "Listing build directory:"
          dir build

# cmake --build . --config Release --target install
# cmake --build . --config Release --target install
